"""empty message

Revision ID: 7fa4c90b01b2
Revises: 
Create Date: 2019-09-06 21:34:34.680211

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '7fa4c90b01b2'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('SET',
    sa.Column('SET', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=45), nullable=False),
    sa.PrimaryKeyConstraint('SET')
    )
    op.create_table('TAG',
    sa.Column('TAG', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('parent', sa.Integer(), nullable=True),
    sa.Column('tagName', sa.String(length=30), nullable=False),
    sa.Column('childOrder', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('TAG')
    )
    op.create_table('USER',
    sa.Column('USER', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('email', sa.String(length=45), nullable=False),
    sa.Column('first_name', sa.String(length=45), nullable=False),
    sa.Column('last_name', sa.String(length=45), nullable=False),
    sa.Column('password', sa.String(length=128), nullable=False),
    sa.Column('salt', sa.String(length=45), nullable=False),
    sa.Column('confirmed', sa.Boolean(), nullable=False),
    sa.Column('is_teacher', sa.Boolean(), nullable=False),
    sa.Column('is_admin', sa.Boolean(), nullable=False),
    sa.Column('color', sa.Integer(), nullable=False),
    sa.Column('theme', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('USER'),
    sa.UniqueConstraint('email')
    )
    op.create_table('CLASS',
    sa.Column('CLASS', sa.Integer(), nullable=False),
    sa.Column('USER', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=45), nullable=False),
    sa.Column('enroll_key', sa.String(length=10), nullable=False),
    sa.Column('price', sa.Float(), nullable=False),
    sa.Column('price_discount', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['USER'], ['USER.USER'], ),
    sa.PrimaryKeyConstraint('CLASS')
    )
    op.create_table('LESSON',
    sa.Column('LESSON', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('USER', sa.Integer(), nullable=False),
    sa.Column('TAG', sa.Integer(), nullable=False),
    sa.Column('lesson_string', sa.Text(), nullable=False),
    sa.Column('question_list', sa.String(length=500), nullable=False),
    sa.ForeignKeyConstraint(['TAG'], ['TAG.TAG'], ),
    sa.ForeignKeyConstraint(['USER'], ['USER.USER'], ),
    sa.PrimaryKeyConstraint('LESSON')
    )
    op.create_table('QUESTION',
    sa.Column('QUESTION', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('SET', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=60), nullable=False),
    sa.Column('string', sa.String(length=5000), nullable=False),
    sa.Column('answers', sa.Integer(), nullable=False),
    sa.Column('total', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['SET'], ['SET.SET'], ),
    sa.PrimaryKeyConstraint('QUESTION')
    )
    op.create_table('tag_user',
    sa.Column('TAGUSER', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('USER', sa.Integer(), nullable=False),
    sa.Column('TAG', sa.Integer(), nullable=False),
    sa.Column('mastery', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['TAG'], ['TAG.TAG'], ),
    sa.ForeignKeyConstraint(['USER'], ['USER.USER'], ),
    sa.PrimaryKeyConstraint('TAGUSER')
    )
    op.create_table('user_views_set',
    sa.Column('USER_VIEWS_SET', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('USER', sa.Integer(), nullable=False),
    sa.Column('SET', sa.Integer(), nullable=False),
    sa.Column('can_edit', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['SET'], ['SET.SET'], ),
    sa.ForeignKeyConstraint(['USER'], ['USER.USER'], ),
    sa.PrimaryKeyConstraint('USER_VIEWS_SET')
    )
    op.create_table('MESSAGE',
    sa.Column('MESSAGE', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('CLASS', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('body', sa.String(length=1000), nullable=False),
    sa.Column('date_created', sa.DATETIME(), nullable=False),
    sa.ForeignKeyConstraint(['CLASS'], ['CLASS.CLASS'], ),
    sa.PrimaryKeyConstraint('MESSAGE')
    )
    op.create_table('TEST',
    sa.Column('TEST', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('CLASS', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(length=45), nullable=False),
    sa.Column('is_open', sa.Boolean(), nullable=False),
    sa.Column('open_time', sa.DateTime(), nullable=True),
    sa.Column('deadline', sa.DateTime(), nullable=False),
    sa.Column('timer', sa.Integer(), nullable=False),
    sa.Column('attempts', sa.Integer(), nullable=False),
    sa.Column('question_list', sa.String(length=5000), nullable=False),
    sa.Column('seed_list', sa.String(length=5000), nullable=False),
    sa.Column('total', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['CLASS'], ['CLASS.CLASS'], ),
    sa.PrimaryKeyConstraint('TEST')
    )
    op.create_table('backlog_whitelist',
    sa.Column('ID', sa.Integer(), nullable=False),
    sa.Column('USER_ID', sa.String(length=100), nullable=False),
    sa.Column('CLASS', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['CLASS'], ['CLASS.CLASS'], ),
    sa.PrimaryKeyConstraint('ID')
    )
    op.create_table('class_whitelist',
    sa.Column('ID', sa.Integer(), nullable=False),
    sa.Column('USER', sa.Integer(), nullable=False),
    sa.Column('CLASS', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['CLASS'], ['CLASS.CLASS'], ),
    sa.ForeignKeyConstraint(['USER'], ['USER.USER'], ),
    sa.PrimaryKeyConstraint('ID')
    )
    op.create_table('tag_class',
    sa.Column('TAG_CLASS', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('TAG', sa.Integer(), nullable=False),
    sa.Column('CLASS', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['CLASS'], ['CLASS.CLASS'], ),
    sa.ForeignKeyConstraint(['TAG'], ['TAG.TAG'], ),
    sa.PrimaryKeyConstraint('TAG_CLASS')
    )
    op.create_table('tag_question',
    sa.Column('TAG_QUESTION', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('TAG', sa.Integer(), nullable=False),
    sa.Column('QUESTION', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['QUESTION'], ['QUESTION.QUESTION'], ),
    sa.ForeignKeyConstraint(['TAG'], ['TAG.TAG'], ),
    sa.PrimaryKeyConstraint('TAG_QUESTION')
    )
    op.create_table('transaction',
    sa.Column('TRANSACTION', sa.String(length=30), nullable=False),
    sa.Column('USER', sa.Integer(), nullable=False),
    sa.Column('CLASS', sa.Integer(), nullable=False),
    sa.Column('expiration', sa.DATETIME(), nullable=False),
    sa.ForeignKeyConstraint(['CLASS'], ['CLASS.CLASS'], ),
    sa.ForeignKeyConstraint(['USER'], ['USER.USER'], ),
    sa.PrimaryKeyConstraint('TRANSACTION')
    )
    op.create_table('transaction_processing',
    sa.Column('TRANSACTIONPROCESSING', sa.String(length=30), nullable=False),
    sa.Column('CLASS', sa.Integer(), nullable=False),
    sa.Column('USER', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['CLASS'], ['CLASS.CLASS'], ),
    sa.ForeignKeyConstraint(['USER'], ['USER.USER'], ),
    sa.PrimaryKeyConstraint('TRANSACTIONPROCESSING')
    )
    op.create_table('user_lesson',
    sa.Column('USER_LESSON', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('USER', sa.Integer(), nullable=False),
    sa.Column('LESSON', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['LESSON'], ['LESSON.LESSON'], ),
    sa.ForeignKeyConstraint(['USER'], ['USER.USER'], ),
    sa.PrimaryKeyConstraint('USER_LESSON')
    )
    op.create_table('takes',
    sa.Column('TAKES', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('TEST', sa.Integer(), nullable=False),
    sa.Column('USER', sa.Integer(), nullable=False),
    sa.Column('time_started', sa.DateTime(), nullable=False),
    sa.Column('time_submitted', sa.DateTime(), nullable=False),
    sa.Column('grade', sa.Float(), nullable=False),
    sa.Column('marks', sa.String(length=1500), nullable=False),
    sa.Column('answers', sa.String(length=7500), nullable=False),
    sa.Column('seeds', sa.String(length=5000), nullable=False),
    sa.ForeignKeyConstraint(['TEST'], ['TEST.TEST'], ),
    sa.ForeignKeyConstraint(['USER'], ['USER.USER'], ),
    sa.PrimaryKeyConstraint('TAKES')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('takes')
    op.drop_table('user_lesson')
    op.drop_table('transaction_processing')
    op.drop_table('transaction')
    op.drop_table('tag_question')
    op.drop_table('tag_class')
    op.drop_table('class_whitelist')
    op.drop_table('backlog_whitelist')
    op.drop_table('TEST')
    op.drop_table('MESSAGE')
    op.drop_table('user_views_set')
    op.drop_table('tag_user')
    op.drop_table('QUESTION')
    op.drop_table('LESSON')
    op.drop_table('CLASS')
    op.drop_table('USER')
    op.drop_table('TAG')
    op.drop_table('SET')
    # ### end Alembic commands ###
